#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

#define OLED_RESET -1
#define SCREEN_ADDRESS 0x3C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
int positionTmp = 0;
int stop = 500;
#define LOGO_HEIGHT   64
#define LOGO_WIDTH    128
const unsigned char epd_bitmap_cocktail [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0xf0, 0x00, 0x03, 0x00, 0x00, 0x0c, 0xc0, 0x60, 0x30, 0x00, 0x03, 0x01, 0x80, 0x00, 0x00, 
	0x03, 0x18, 0x00, 0x03, 0x01, 0x00, 0x0c, 0xc0, 0x70, 0x30, 0x00, 0x03, 0x01, 0x80, 0x00, 0x00, 
	0x02, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0xc0, 0x50, 0x70, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 
	0x06, 0x00, 0xf0, 0xf3, 0x33, 0xc7, 0x8c, 0xc0, 0x50, 0x50, 0xf0, 0xf3, 0x71, 0x97, 0x87, 0x80, 
	0x04, 0x01, 0x19, 0x8b, 0x61, 0x08, 0xcc, 0xc0, 0x58, 0xd9, 0x19, 0x8b, 0x91, 0x9c, 0x8c, 0xc0, 
	0x04, 0x02, 0x09, 0x03, 0x41, 0x00, 0xcc, 0xc0, 0x48, 0x98, 0x19, 0x03, 0x19, 0x98, 0xc8, 0x40, 
	0x04, 0x02, 0x09, 0x03, 0x81, 0x07, 0xcc, 0xc0, 0x4c, 0x98, 0xf9, 0x03, 0x19, 0x98, 0xcf, 0xc0, 
	0x06, 0x02, 0x09, 0x03, 0xc1, 0x0c, 0xcc, 0xc0, 0x45, 0x91, 0x19, 0x03, 0x19, 0x98, 0xc8, 0x00, 
	0x06, 0x02, 0x09, 0x03, 0x61, 0x08, 0xcc, 0xc0, 0x47, 0x19, 0x19, 0x03, 0x19, 0x98, 0xc8, 0x00, 
	0x03, 0x1b, 0x19, 0x8b, 0x31, 0x08, 0xcc, 0xc0, 0x47, 0x19, 0x19, 0x8b, 0x19, 0x98, 0xcc, 0x40, 
	0x01, 0xf1, 0xf0, 0xf3, 0x11, 0xc7, 0x4c, 0xc0, 0x42, 0x10, 0xe8, 0xf3, 0x19, 0x98, 0xc7, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x9f, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0xf7, 0xc3, 0x8f, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xc3, 0x3f, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x03, 0xc1, 0xef, 0x79, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x2e, 0xc0, 0x7f, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6f, 0x40, 0x1f, 0x87, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x0f, 0xff, 0xff, 0x87, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x1f, 0xff, 0xff, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x9f, 0xc8, 0x0f, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x0e, 0x80, 0x0f, 0x87, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0xee, 0x00, 0x0e, 0x79, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x2e, 0x00, 0x0e, 0x39, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x0c, 0x00, 0x0e, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xec, 0x0a, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x70, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x31, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf9, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void SetScreen(String first, String second, int size)
{
  display.clearDisplay();
  display.setRotation(0);

  display.setTextSize(size);           // Normal 1:1 pixel scale
  display.setTextColor(SSD1306_WHITE); // Draw white text
  display.setCursor(10, 10);           // Start at top-left corner
  display.println(first);
  display.setCursor(10, 40);
  display.println(second.c_str());
  display.display();
  delay(50);
}

void setImage(void) {
  display.clearDisplay();

  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    (display.height() - LOGO_HEIGHT) / 2,
    epd_bitmap_cocktail, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.display();
  delay(50);
}


void StartDisplay()
{

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS))
  {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;)
      ; // Don't proceed, loop forever
  }

  // SetScreen("Elije", "Cocktail", 2);
  display.clearDisplay();
  display.setRotation(0);
//http://javl.github.io/image2cpp/
  setImage();    
  display.display();
  delay(50);
}

void Control(String direction)
{
  if (direction == "back")
  {
    Serial.println("Has apretado back");
  }
  else if (direction == "up")
  {
    Serial.println("Has apretado arriba");
  }
  else if (direction == "next")
  {
    Serial.println("Has apretado siguiente: " + String(positionTmp));
    if (positionTmp != 0)
    {
      positionTmp = positionTmp - stop;
    }
    positionTmp++;
  }
  else if (direction == "down")
  {
    Serial.println("Has apretado abajo");

    if (positionTmp != 0)
    {
      positionTmp = 500;
    }
  }
  else if (direction == "accept")
  {
    Serial.println("Has apretado aceptar");
  }
  else
  {
    // Invalid idValue
  }
}

void loopDisplay()
{

  /*
  if (positionTmp == 0) {
    SetScreen("Elije", "Cocktail", 2);
  }*/
  if (positionTmp == 500)
  {
      setImage();   
  //  SetScreen("Elije", "Cocktail", 2);
    positionTmp = 0;
  }
  if (positionTmp == 1)
  {

    SetScreen("Agua", "", 2);
    positionTmp = positionTmp + stop;
  }
  else if (positionTmp == 2)
  {

    SetScreen("Cocacola", "", 2);
    positionTmp = positionTmp + stop;
  }
  else if (positionTmp == 3)
  {

    positionTmp = 1;
  }
}
void ListenDisplay()
{
  server.on(
      "/control", HTTP_GET, [](AsyncWebServerRequest *request)
      {
      String direction;
      if (request->hasParam("direction")) {
        direction = request->getParam("direction")->value();
        Control(direction);
      } else {
        direction = "No direction sent";
      }
      request->send(200, "text/plain", "the direction is: " + direction); });
}
